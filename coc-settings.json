{
	"suggest.noselect": false,
	"coc.preferences.formatOnSaveFiletypes": [
		"javascript",
		"typescript",
		"typescriptreact",
		"json",
		"javascriptreact",
		"typescript.tsx",
		"graphql",
		"css",
		"markdown",
		"scss",
		"less",
		"elixir",
		"terraform",
		"tf",
		"yaml",
		"yml",
		"python",
		"docker",
		"md",
		"html",
		"svg",
		"prisma"
	],

	// snippets
	"snippets.userSnippetsDirectory": "~/.config/nvim/snips",
	"snippets.extends": {
		"typescript": ["typescriptreact"],
		"javascript": ["typescriptreact", "javascriptreact"],
		"javascriptreact": ["typescriptreact"],
		"vimwiki": ["markdown"]
	},

	"markdownlint.config": {
		"MD013": false,
		"MD033": false,
		"MD041": false
	},

	// elixir
	// point to release distribution for lsp to have the same elixir version as your project
	// need to compile and create release using the correct elixir version
	// https://www.youtube.com/watch?v=FXpsUh0Hs9Y
	// https://arusahni.net/blog/2020/08/elixir-vim.html
	"elixir.pathToElixirLS": "~/.elixir-ls/release/language_server.sh",
  "diagnostic-languageserver.filetypes": {
    "elixir": ["mix_credo", "mix_credo_compile"],
    "eelixir": ["mix_credo", "mix_credo_compile"]
  },
  "diagnostic-languageserver.formatFiletypes": {
    "elixir": "mix_format",
    "eelixir": "mix_format"
  },
	// tsserver
	// should be shortest but on backend it keeps giving me alias path even though I've removed it
	"typescript.preferences.importModuleSpecifier": "shortest",
	//"typescript.preferences.importModuleSpecifier": "relative",
	// use typescript from node_modules
	"tsserver.tsdk": "node_modules/typescript/lib",
	// use tsserver from ts module in workspace. Ignore tsserver.tsdk
	"tsserver.useLocalTsdk": true,
	"typescript.inlayHints.functionLikeReturnTypes.enabled": true,
	"typescript.preferences.autoImportFileExcludePatterns": [
		"@remix-run/server-runtime",
		"@remix-run/router",
		"react-router",
		"@radix-ui"
	],

	// tw
	"tailwindCSS.enable": true,
	"tailwindCSS.emmetCompletions": true,
	"tailwindCSS.hovers": true,
	"tailwindCSS.includeLanguages": {
		"javascript": "javascriptreact",
		"typescript": "typescriptreact"
	},
	"tailwindCSS.experimental.classRegex": [
		["cva\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"]
	],

	// prettier config
	"prettier.semi": false,
	"prettier.singleQuote": true,
	"prettier.jsxSingleQuote": true,
	"prettier.useTabs": true,

	// eslint
	"eslint.autoFixOnSave": true,
	"eslint.run": "onSave",

	// bigger diagnostic windows
	// https://github.com/neoclide/coc.nvim/blob/master/doc/coc.txt
	"diagnostic.maxWindowHeight": 160,
	"diagnostic.maxWindowWidth": 160,
	"diagnostic.messageTarget": "float",
	"diagnostic.virtualText": true,
	"diagnostic.virtualTextCurrentLineOnly": false,
	"suggest.detailMaxLength": 160,
	"suggest.maxPreviewWidth": 160,
	"signature.maxWindowWidth": 80,
	"signature.maxWindowHeight": 8,
	"coc.preferences.previewMaxHeight": 16,

	"emmet.includeLanguages": {
		"javascript": "javascriptreact",
		"typescript": "typescriptreact"
	},

	// disables tabnine completion for elixir since do->end relies on lsp which is slow resulting in bad ux
	// also tabnine completion for elixir isn't good in the first place
	// we know use end-wise so might as well bring it back
	//"tabnine.disable_file_regex": ["[.]ex$", "[.]exs$"],

	// git lens
	//"git.addGBlameToVirtualText": true,

	"languageserver": {
		"terraform": {
			"command": "terraform-ls",
			"args": ["serve"],
			"filetypes": ["terraform", "tf", "hcl"],
			"initializationOptions": {},
			"settings": {}
		},

		"tflint": {
			"command": "tflint",
			"args": ["--langserver"],
			"filetypes": ["terraform", "tf"],
      "rootPatterns": ["main.tf", "Makefile", ".git"]
		},
		// already included in coc-sh
		//"bash": {
		//"command": "bash-language-server",
		//"args": ["start"],
		//"filetypes": ["sh"]
		//},

		// kinda clunky with monorepos
		//"graphql": {
			//"command": "graphql-lsp",
			//"trace.server": "verbose",
			//"args": ["server", "-m", "stream"],
			//// customize filetypes to your needs
			//"filetypes": [
				//"typescript",
				//"typescriptreact",
				//"graphql",
				//"javascript",
				//"javascriptreact",
				//"gql"
			//]
		//},
		"dockerfile": {
			"command": "docker-langserver",
			"filetypes": ["dockerfile"],
			"args": ["--stdio"]
		}
		// install failed
		//"sql": {
		//"command": "sql-language-server",
		//"args": ["up", "--method", "stdio"],
		//"filetypes": ["sql", "mysql"]
		//}
	},

	// import-cost
	// elixir @spec suggestions
	"codeLens.enable": true
	//"importCost.debug": true,
	//"importCost.typescriptExtensions": [
	//"\\.tsx?$",
	//"\\.ts?$"
	//],
	// Which bundle size to display
	//"importCost.bundleSizeDecoration": "both",
	// Display the 'calculating' decoration
	//"importCost.showCalculatingDecoration": true

	// explorer
	// "explorer.width": 30,
	// "explorer.icon.enableNerdfont": true,
	// "explorer.icon.enableVimDevicons": true,
	// "explorer.previewAction.onHover": true,
	// "explorer.position": "right",
	// "explorer.keyMappings": {
	//   "yp": "copyFilepath",
	//   "yn": "copyFilename",
	//   "yy": "copyFile",
	//   "dd": "cutFile",
	//   "p": "pasteFile",
	//   "df": "delete",
	//   "dF": "deleteForever",

	//   "a": "addFile",
	//   "A": "addDirectory",
	//   "r": "rename",

	//   "zh": "toggleHidden",
	//   "g<dot>": "toggleHidden",
	//   "R": "refresh",

	//   "?": "help",
	//   "q": "quit",
	//   "<esc>": "esc",
	//   "X": "systemExecute",
	//   "gd": "listDrive",

	//   "f": "search",
	//   "F": "searchRecursive",

	//   "gf": "gotoSource:file",
	//   "gb": "gotoSource:buffer"
	// },
	// "explorer.keyMappings.global": {
	//   "<cr>": ["expandable?", "expand", "open"],
	//   "t": "open:vsplit",
	//   "s": "open:split"
	// },
	// "explorer.keyMappings.global": {
	//   "<cr>": ["expandable?", ["expanded?", "collapse", "expand"], "open"]
	// },
	// "explorer.file.showHiddenFiles": true
}

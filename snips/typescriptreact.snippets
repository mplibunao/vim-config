# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet useEffect "react useEffect" b
useEffect(() => {

}, [$1])
endsnippet

snippet tsxusestate "tsx useState" b
const [$1, set_$1] = useState<$2>($3)
endsnippet

snippet consolelog "console.log" b
console.log('$1', $1)
endsnippet

snippet tsxteaf "typecript type react exported arrow function" b
export type $1Props = {}

export const $1 = (_props: $1Props): JSX.Element => {
	return <div>$1</div>
}
endsnippet

snippet tsxieaf "typecript interface react exported arrow function" b
export interface $1Props {}

export const $1 = (_props: $1Props): JSX.Element => {
	return <div>$1</div>
}
endsnippet

snippet tsxiedf "typecript interface react exported default function" b
export interface $1Props {}

export default function $1 (_props: $1Props): JSX.Element {
	return <div>$1</div>
}
endsnippet

snippet tsxedf "typescript react exported default function" b
export default function $1 (): JSX.Element {
	return <div>$1</div>
}
endsnippet

#snippet tsxieaf "typecript interface react.fc" b
#import React from 'react'

#export interface $1Props {}

#export const $1: React.FC<$1Props> = () => {
	#return <div>$1</div>
#}

#export default $1 
#endsnippet

snippet importnamed "es6 named imports" b
import { $2 } from '$1';
endsnippet

snippet importdefault "es6 Import default" b
import $2 from '$1';
endsnippet

snippet importmodule "es6 Import default" b
import * as $2 from '$1';
endsnippet

snippet barrelexports "barrel exports" b
export * from './$1'
endsnippet

snippet react "import react" b
import React from 'react'
endsnippet

snippet asyncfunctrycatch "export async function with try catch" b
export const $1 = async () => {
	try {

	} catch (err) {

	}
}
endsnippet

snippet trycatch "trycatch with err (for pino)" b
try {
	$1
} catch (err) {

}
endsnippet


snippet tsxfunc "export function" b
export const $1 = () => {
	$2
}
endsnippet

snippet tsignore "ts-ignore" b
// @ts-ignore
endsnippet

snippet selfclosingtag "Self Closing tag"
<$1 />
endsnippet

snippet openclosetag "Open Close tag"
<$1>
	$2
</$1>
endsnippet

#snippet apollomutation "Apollo mutation" b
#const [$1, { loading }] = useMutation($2)
#endsnippet

#snippet apolloquery "Apollo useQuery" b
#const { data, loading } = useQuery($1)
#endsnippet

#snippet apollosubscription "Apollo useSubscription" b
#const { data } = useSubscription($1)
#endsnippet

snippet throwerror "Throw new error" b
throw new Error($1)
endsnippet

# Remix snippets

#import type { DataFunctionArgs } from '@remix-run/node'
snippet remixloader "Remix loader" b
export const loader = async ($1: DataFunctionArgs) => {
	$2
}
endsnippet

#import { useLoaderData } from '@remix-run/react'
snippet remixuseloaderdata "Remix useLoaderData" b
const $1 = useLoaderData<typeof loader>() 
endsnippet

#import type { ActionArgs } from '@remix-run/node'
snippet remixaction "Remix action" b
export const action = async ($1: ActionArgs) => {
	$2
}
endsnippet

#import { useActionData } from '@remix-run/react'
snippet remixuseactiondata "Remix useActionData" b
const $1 = useActionData<typeof action>()
endsnippet

#import type { HeadersFunction } from '@remix-run/node'
snippet remixheaders "Remix headers" b
export const headers: HeadersFunction = ({ loaderHeaders }) => ({
	'Cache-Control': loaderHeaders.get('Cache-Control') ?? '',
})
endsnippet

#import type { LinksFunction } from '@remix-run/node'
snippet remixlinks "Remix links" b
export const links: LinksFunction = () {
	return [
		$1
	]
}
endsnippet

#import type { V2_MetaFunction } from '@remix-run/node'
snippet remixmeta "Remix meta" b
export const meta: V2_MetaFunction<typeof loader> = ({ data }) => [{
	title: $1,
}]
endsnippet

#import type { ShouldRevalidateFunction } from '@remix-run/react'
snippet remixshouldrevalidate "Remix should revalidate" b
export const shouldRevalidate: ShouldRevalidateFunction = ({
	defaultShouldRevalidate
}) => {
	return defaultShouldRevalidate
}
endsnippet

snippet remixstylesurface "Remix surface styles" b
import $2 from '$3'

export const $1Links: LinkDescriptor[] = [{ rel: 'stylesheet', href: $2 }]
endsnippet

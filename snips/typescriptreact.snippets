# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet useEffect "react useEffect" b
useEffect(() => {

}, [$1])
endsnippet

snippet tsxusestate "tsx useState" b
const [$1, set_$1] = useState<$2>($3)
endsnippet

snippet log "console.log" b
console.log('$1', $1)
endsnippet

snippet tsxeaf "typecript type react exported arrow function" b
import React from 'react'

export type $1Props = {}

export const $1 = (props: $1Props): JSX.Element => {
	return <div>$1</div>
}

export default $1 
endsnippet

snippet tsxieaf "typecript interface react exported arrow function" b
import React from 'react'

export interface $1Props {}

export const $1 = (props: $1Props): JSX.Element => {
	return <div>$1</div>
}

export default $1 
endsnippet

snippet impc "es6 Import const" b
import { $2 } from '$1';
endsnippet

snippet impd "es6 Import default" b
import $2 from '$1';
endsnippet

snippet exp "named export" b
export * from './$1'
endsnippet

snippet react "import react" b
import React from 'react'
endsnippet

snippet async "async function" b
const $1 = async () => {
	try {

	} catch (err) {

	}
}
endsnippet

snippet tsignore "ts-ignore" b
// @ts-ignore
endsnippet

snippet sct "Self Closing tag"
<$1 />
endsnippet

snippet oct "Open Close tag"
<$1>
	$2
</$1>
endsnippet

snippet apollomutation "Apollo mutation" b
const [$1, { loading }] = useMutation($2)
endsnippet

snippet apolloquery "Apollo useQuery" b
const { data, loading } = useQuery($1)
endsnippet

snippet apollosubscription "Apollo useSubscription" b
const { data } = useSubscription($1)
